# Практическая самостоятельная работа «Списки».

# Задания:

# 1 слово/предложение

# Наберите слово или слово с клавиатуры и посчитайте, сколько в нем гласных и сколько согласных.

# При вводе предложения также посчитайте знаки препинания и пробелы.

# 2 Список

# Попросите пользователя назвать пять имен. Сохраните их в списке и отобразите в алфавитном порядке. Отображать последнее добавленное имя отдельно.

# Добавьте возможность менять имена в списке.

# Создайте список, в который вы намеренно добавили несколько одинаковых имен. студенты = ['Юхан','Кати','Марио','Марио','Мати','Мати']

# Создайте код, который не создает дубликатов.

# Создайте список возрастов. Найдите наибольшее и наименьшее число, сумму, среднее чисел.

# 3 звезды

#     Используйте значения чисел в списке и создайте гистограмму, используя звезды. Например:

# ******************
# **********************
# *********************************
# *******************************************
# **************************************************** **** **
# ************

# 4 Почтовый индекс

# В Эстонии почтовые индексы состоят из 5 цифр, первая цифра из которых указывает уезд:

#     1 – Таллинн
#     2 – Нарва, Нарва-Йыэсуу
#     3 – Кохтла-Ярве
#     4 – Ида-Вирумаа, Ляэне-Вирумаа, Йыгевамаа
#     5 – город Тарту
#     6 – Тартуммаа, Пылвамаа, Выруммаа, Валгаммаа
#     7 – Вильяндимаа, Ярвамаа, Харьюмаа, Рапламаа
#     8 – Пярнумаа
#     9 – Ляэнемаа, Хийумаа, Сааремаа

# Напишите программу, которая проверяет введенный индекс (количество символов, соответствующий тип данных и т. д.) и показывает, к какому округу он принадлежит.

# Чтобы проверить, к какому округу принадлежит индекс, нужно проверить первую цифру введенного значения. Для этого введенный индекс необходимо преобразовать в список с помощью index_list=list(index) и взять для проверки только первый элемент index_list[0].

# И если почтовый индеск Нарви, Талиннны и Кохтла-Ярве, сообщить пользователю «Оставайтесь дома!», в качестве решения «Носите маски!».

# Задание 2: Перемена мест
# Напишите программу, которая меняет местами первый и последний элементы. (второй и предпоследний и т.д.). Количество меняемых местами элементов надо спросить у пользователя. В исходном списке минимум 2 элемента.

# Задание 3: Бесполезные числа
# Николай задумался о поиске «бесполезного» числа на основании списка.
# Суть оного в следующем: он берет произвольный список чисел, находит самое большое из них, а затем делит его на длину списка и заменяет его в списке результатом деления.
# Студент пока не придумал, где может пригодиться подобное значение, но ищет у вас помощи в реализации такой функции.

# Задание 4: Сортировка
# Требуется создать программу, которая сортирует список чисел по убыванию/возрастанию их абсолютного значения.

# Задание 5:
# На входе имеем список строк разной длины.

# ['крот', 'белка', 'выхухоль']
# ['a', 'aa', 'aaa', 'aaaa', 'aaaaa']
# ['qweasdqweas', 'q', 'rteww', 'ewqqqqq']

# Необходимо написать программу, которая вернет новый список из строк одинаковой длины. Длину итоговой строки определяем исходя из самой большой из них. Если конкретная строка короче самой длинной, дополнить ее нижними подчеркиваниями с правого края до требуемого количества символов. Расположение элементов начального списка не менять.

# ['крот____', 'белка___', 'выхухоль']
# ['a____', 'aa___', 'aaa__', 'aaaa_', 'aaaaa']
# ['qweasdqweas', 'q__________', 'rteww______', 'ewqqqqq____']

# Задание 6: Проверка имени
# Надо спросить имя человека. Проверь чтобы в имени были только буквы.
# Отобрази приветствие, используя имя с большой буквы.
# Посчитай сколько букв в имени. Найти количество гласных и согласных букв с слове.
# Выведи на экран буквы имени в алфавитном порядке.(если буква встречается несколько раз, то повторять ее не надо)

# 1

# Это дано

# Ааду Суур, 56, 2500
# Капуста Малле;42;1500
# Уудо Коба, 32, 700
# Тийт Копикас, 22, 550
# Вахур Олд, 67, 870

# , где каждая строка содержит имя сотрудника, возраст и месячную зарплату. Напишите программу, которая выводит на основе заданных данных:

#      имя и сумма работника с самой высокой зарплатой (подсказка: при поиске самой высокой зарплаты помните о должности, на которой вы ее нашли);
#      Средняя заработная плата;
#      количество людей, зарабатывающих больше средней зарплаты;
#      средний возраст отдельно для тех, кто зарабатывает меньше (или столько же) средней заработной платы, и для тех, кто зарабатывает среднюю заработную плату

# 2
# Напишите программу, которая отображает последовательность из n букв английского алфавита ['a', 'b', 'c', ...] в подрегистре и другую последовательность: ['a', 'bb', 'ccc', «дддд», «ээээээ», «фффффф», ...] еще.


# 3

# Создайте список из 10 случайных чисел от 1 до 100. Напишите программу, меняющую местами минимальный и максимальный элементы этого списка.

# 4

# Угадай слово
# Составьте последовательность слов. Программа случайным образом отображает слово в последовательности как подчеркивание в зависимости от количества букв.
# Пользователь вводит букву, если такая буква существует, то в правильном месте слова вместо подчеркивания отображается буква. Если такой буквы нет, эта буква добавляется к последовательности неугаданных букв и эта последовательность также отображается. Если пользователь угадал слово, программа также должна отобразить количество попыток.

# 5

# Составьте последовательность не менее десяти европейских столиц (в любом порядке).

#      Выведите города отдельными строками.
#      Расположите их в алфавитном порядке.
#      Позвольте пользователю добавить две новые европейские столицы и изменить их порядок.
#      Перечислите названия городов в алфавитном порядке, добавляя перед каждым названием порядковый номер.
#      Добавьте к выходным данным сводное предложение «В нашей последовательности 12 европейских столиц», где количество городов находится с помощью соответствующей функции.

# 6

# Для простого словаря составьте четыре последовательности (цифра, эстонский, английский, итальянский) с содержанием: цифра — 1, 2, 3, 4. Эстонская — раз, два, три, четыре. Английская — раз, два, три, четыре. Итальянская — уно, должное, тре, кватро

# Вывести все элементы в виде таблицы на экран: 1 - один - один - уно 2 - два - два - срок...

#      Добавьте еще два элемента в последовательность цифр и эстонский.
#      Проверьте, возбуждает ли элемент «tre» в итальянском порядке слов.
#      Выведите элементы всех четырех последовательностей в возрастающем алфавитном порядке.

# 7

# Составьте последовательность из следующих предложений:

#      Да, конечно!
#      Да!
#      Может быть!
#      Нет!

# Создайте программу, в которой пользователь может задавать вопрос «да/нет», а программа дает ответ на один произвольный элемент из предыдущей последовательности.

# Генерацию случайных чисел мы рассмотрим в будущем, а сейчас добавим в начало программы строку, позволяющую Python генерировать случайные числа:
# импортировать случайный

# Затем в любом месте программы мы можем использовать random.randint(x, y) для генерации случайного числа, которое генерирует случайное целое число от x до y (оба включительно), например:
# случайное число = случайный.randint(1, 10)

# Также добавьте вводные и вводные тексты, чтобы диалог с пользователем был максимально естественным.
# 8

# Составьте последовательность слов. Затем напишите программу, которая запрашивает у пользователя поисковый запрос, затем проходит по всем элементам последовательности и отображает элемент последовательности на экране, если элемент последовательности содержит искомое слово.

# Подсказка: вы можете искать слово по строке «if <искомое слово> в слове».

# Например:
# Сона="автомобиль"
# если «авто» в соне:
#      print("Да, содержит слово")
# 9
# Придумайте себе задачу и решите ее. 
# 
# Например, вы можете создать последовательность из 10 случайных чисел и отобразить на экране только те числа, которые делятся на 3 без остатка.